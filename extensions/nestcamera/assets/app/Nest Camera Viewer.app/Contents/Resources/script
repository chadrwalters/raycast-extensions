#!/bin/bash

# nest-player.sh - A script to play RTSP streams from Nest cameras using FFplay
# This script is designed to be wrapped by Platypus to create a native macOS app

# Enable debug output
set -x

# Check if URL is provided as the first argument
if [ -z "$1" ]; then
  echo "Error: No RTSP URL provided"
  exit 1
fi

# Store URL in a file to avoid command line length issues
RTSP_URL="$1"
URL_FILE=$(mktemp)
echo "$RTSP_URL" > "$URL_FILE"

CAMERA_NAME="${2:-Nest Camera}"
WINDOW_TITLE="Nest Camera: $CAMERA_NAME"

# Show a loading dialog that will stay on screen
# Run it in the background so it doesn't block the script
LOADING_SCRIPT=$(mktemp)
cat > "$LOADING_SCRIPT" << EOF
#!/usr/bin/osascript

on run
  tell application "System Events"
    display dialog "Loading video stream for $CAMERA_NAME...\n\nThis may take up to 20 seconds depending on your network connection." with title "Nest Camera Viewer" buttons {"Cancel"} default button "Cancel" giving up after 30 with icon caution
  end tell
end run
EOF

chmod +x "$LOADING_SCRIPT"

# Run the loading dialog in the background and capture its PID
osascript "$LOADING_SCRIPT" &
LOADING_DIALOG_PID=$!

# Function to close the loading dialog
function close_loading_dialog() {
  if [ -n "$LOADING_DIALOG_PID" ]; then
    # Try to kill the dialog process
    kill -9 $LOADING_DIALOG_PID 2>/dev/null || true
    
    # Also try to close any open dialogs using AppleScript
    osascript -e 'tell application "System Events" to if exists (processes where name is "System Events") then tell process "System Events" to if exists (windows where name is "Nest Camera Viewer") then click button "Cancel" of window "Nest Camera Viewer"' &
  fi
}

# Common paths for FFplay on macOS
FFPLAY_PATHS=(
  "/opt/homebrew/bin/ffplay"
  "/usr/local/bin/ffplay"
  "/usr/bin/ffplay"
  "$(which ffplay 2>/dev/null)"
)

# Find FFplay
FFPLAY_PATH=""
for path in "${FFPLAY_PATHS[@]}"; do
  if [ -x "$path" ]; then
    FFPLAY_PATH="$path"
    break
  fi
done

# Check if ffplay is found
if [ -z "$FFPLAY_PATH" ]; then
  echo "Error: ffplay not found. Please install FFmpeg."
  close_loading_dialog
  osascript -e "display notification \"FFplay not found. Please install FFmpeg using 'brew install ffmpeg'.\" with title \"Nest Camera Error\""
  rm -f "$URL_FILE" "$LOADING_SCRIPT"
  exit 1
fi

echo "Using FFplay at: $FFPLAY_PATH"
echo "Starting FFplay with RTSP URL: $RTSP_URL"
echo "Camera: $CAMERA_NAME"

# Set window size and position
# Using more conservative values that should work on most displays
WINDOW_WIDTH=640
WINDOW_HEIGHT=480

# Position in the top-right corner but with safer values
# Get screen dimensions using AppleScript
SCREEN_INFO=$(osascript -e 'tell application "Finder" to get bounds of window of desktop')
SCREEN_WIDTH=$(echo $SCREEN_INFO | awk '{print $3}')
SCREEN_HEIGHT=$(echo $SCREEN_INFO | awk '{print $4}')

# Calculate position to be visible on most screens
# Position window in the top-right corner with a 20px margin
if [ -n "$SCREEN_WIDTH" ] && [ -n "$SCREEN_HEIGHT" ]; then
  X_POSITION=$((SCREEN_WIDTH - WINDOW_WIDTH - 20))
  Y_POSITION=40
else
  # Fallback to safe values if screen dimensions can't be determined
  X_POSITION=800
  Y_POSITION=40
fi

echo "Screen dimensions: ${SCREEN_WIDTH}x${SCREEN_HEIGHT}"
echo "Window position: ${X_POSITION},${Y_POSITION}"

# Try to find the bundle identifier for FFplay
FFPLAY_BUNDLE_ID=$(osascript -e 'id of app "ffplay"' 2>/dev/null || echo "org.ffmpeg.ffplay")
echo "FFplay bundle ID: $FFPLAY_BUNDLE_ID"

# Set FFplay as a background-only application
defaults write "$FFPLAY_BUNDLE_ID" LSUIElement -bool true
defaults write "$FFPLAY_BUNDLE_ID" LSBackgroundOnly -bool true

# Create a wrapper script that will launch FFplay through nohup
WRAPPER_SCRIPT=$(mktemp)
cat > "$WRAPPER_SCRIPT" << EOF
#!/bin/bash

# Set environment variables to help hide FFplay from dock
export DISPLAY_IN_DOCK=0
export LSUIElement=1
export LSBackgroundOnly=1

# Launch FFplay with the noborder flag and other optimizations
"$FFPLAY_PATH" \
  -fflags nobuffer \
  -flags low_delay \
  -rtsp_transport tcp \
  -vf "setpts=PTS-STARTPTS" \
  -af "aresample=async=1" \
  -window_title "$WINDOW_TITLE" \
  -loglevel warning \
  -x $WINDOW_WIDTH -y $WINDOW_HEIGHT \
  -noborder \
  -volume 100 \
  -stats \
  -ast 0 \
  -i "$(cat "$URL_FILE")" \
  2>&1 | grep -v "deprecated"
EOF

chmod +x "$WRAPPER_SCRIPT"

# Create a more robust AppleScript to hide FFplay from dock
APPLESCRIPT_FILE=$(mktemp)
cat > "$APPLESCRIPT_FILE" << EOF
-- Wait for FFplay to start
delay 1

tell application "System Events"
  -- Try different ways to find the FFplay process
  set ffplayProcess to first process where name contains "ffplay" or name contains "FFplay"
  
  tell ffplayProcess
    -- Try different properties to hide from dock
    try
      set background only to true
    end try
    
    try
      set visible to false
      delay 0.1
      set visible to true
    end try
    
    -- Position the window
    try
      set position of window 1 to {$X_POSITION, $Y_POSITION}
    end try
    
    -- Set up a handler for when FFplay quits
    try
      tell application "Nest Camera Viewer" to set has quit handler to true
    end try
  end tell
end tell

-- Try to hide FFplay icon from Dock
try
  tell application "Dock"
    quit
    delay 0.5
    activate
  end tell
end try
EOF

# Launch FFplay using nohup to detach it from the terminal and prevent it from showing in the dock
# The /dev/null redirection helps prevent it from creating a dock icon
FFPLAY_PID=$(nohup "$WRAPPER_SCRIPT" </dev/null >/dev/null 2>&1 & echo $!)

# Run the AppleScript to set the process properties
osascript "$APPLESCRIPT_FILE" &

# Create a monitor script to quit the app when FFplay exits
MONITOR_SCRIPT=$(mktemp)
cat > "$MONITOR_SCRIPT" << EOF
#!/bin/bash
# Monitor FFplay process and quit the app when it exits
while kill -0 $FFPLAY_PID 2>/dev/null; do
  sleep 1
done

# FFplay has exited, quit the app
osascript -e 'tell application "Nest Camera Viewer" to quit'
EOF

chmod +x "$MONITOR_SCRIPT"
"$MONITOR_SCRIPT" &

# Wait for FFplay to start and become visible (give it a few seconds)
sleep 5

# Close the loading dialog once FFplay is running
close_loading_dialog

# Wait for FFplay to exit
while kill -0 $FFPLAY_PID 2>/dev/null; do
  sleep 1
done

# Get the exit code (this will be approximate since we're using nohup)
EXIT_CODE=$?
if [ $EXIT_CODE -ne 0 ]; then
  echo "Error: FFplay may have exited with an error"
  close_loading_dialog
  osascript -e "display notification \"FFplay may have failed to play the stream.\" with title \"Nest Camera Error\""
  rm -f "$URL_FILE" "$APPLESCRIPT_FILE" "$MONITOR_SCRIPT" "$WRAPPER_SCRIPT" "$LOADING_SCRIPT"
  exit $EXIT_CODE
fi

# Clean up
rm -f "$URL_FILE" "$APPLESCRIPT_FILE" "$MONITOR_SCRIPT" "$WRAPPER_SCRIPT" "$LOADING_SCRIPT"

# Quit the app
osascript -e 'tell application "Nest Camera Viewer" to quit'

exit 0 